@using HallRentalSystem.Classes;
@using System.Text;
@using Controllers;
@using HallRentalSystem.Classes.Models;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using HallRentalSystem.Components;
@using HallRentalSystem.Classes.StructuralAndBehavioralElements;
@using HallRentalSystem.Classes.API_Parameters;
@using HallRentalSystem.Classes.StructuralAndBehavioralElements.Formaters;
@inject IJSRuntime JS
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage LocalStorage;
@page "/book"


<PageTitle>Booking</PageTitle>

@* NAVBAR FOR FILTERING HALLS *@
<nav id="halls_nav" class="navbar navbar-light bg-light">
    <div class="label-div">
        <a class="navbar-brand" style="font-size:25px;">Location</a>
        <select @onchange=@((changed_value)=>LocationOnChange(changed_value?.Value?.ToString())) class="form-select select-location" aria-label="Default select example" style="width: 200px; height: 40px; font-size: 16px; padding: 5px 10px; border: 1px solid #ccc; border-radius: 4px;">
            <option selected>All</option>
            <option value="London">London</option>
            <option value="Crawley">Crawley</option>
            <option value="Liverpool">Liverpool</option>
            <option value="Manchester">Manchester</option>
        </select>
    </div>
</nav>

@* CONTAINER THAT HOLDS THE CURENT HALL ELEMENTS *@
<div id="halls_container" class="halls_container">
    <div class="halls_container_inner">
        @for (int i = 0; i < halls?.Count; i++)
        {
            string element = "hall_element_" + i;
            <Hall_Element value="halls.ElementAt(i).Value" element="@element" amenities="@halls.ElementAt(i).Value.Amenities" />
        }
    </div>
</div>


@code{

    private Halls? halls = new Halls();
    public bool Loaded;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        // IF THE PAGE DID NOT LOAD
        if (Loaded == false)
        {
            // SET THAT THE PAGE HAS LOADED
            Loaded = true;

            // RENDER HALLS AT ALL LOCATIONS
            LocationOnChange("All");
        }
    }

    public async void LocationOnChange(string? location)
    {
        // "StringBuilder" OBJECT THAT HOLDS THE HALLS API PATH URI
        StringBuilder url_formatter = new StringBuilder();

        // CRATE AN HTML CLIENT
        HttpClient client = Shared_Data.GenerateHttpCLient();

        // SET THE BASE ADDRESS OF THE PATH THE SAME AS THE CURRENT PAGE BECAUSE THE API IS ON THE SAME ORIGIN
        client.BaseAddress = new Uri(NavigationManager.BaseUri);

        // IF ALL LOCATIONS ARE NOT SELECTED
        if (location != "All")
        {
            // APPEND THE URI OF THE HALLS API AND ADD AS ITS QUERY PARAMETER THE CURRENT SELECTED LOCATION
            url_formatter.Append("/halls/get-halls-page?");
            url_formatter.Append(System.Web.HttpUtility.UrlEncode("data"));
            url_formatter.Append("=");
            url_formatter.Append(System.Web.HttpUtility.UrlEncode(location));
        }
        // IF ALL LOCATIONS ARE SELECTED
        else
        {
            // APPEND THE URI OF THE HALLS API
            url_formatter.Append("/halls/get-halls-page");
        }


        // INITIATE A GET REQUEST TO THE HALLS API
        HttpResponseMessage response = await client.GetAsync(url_formatter.ToString());

        // DESEARIALIZE THE RESPONSE FROM A JSON OBJECT INTO A C# OBJECT
        halls = Newtonsoft.Json.JsonConvert.DeserializeObject<Halls>(await response.Content.ReadAsStringAsync());

        // RELOAD THE CURRENT COMPONENT
        StateHasChanged();
    }
}