@using Radzen;
@using Radzen.Blazor.Rendering;
@using System.Text;
@using HallRentalSystem.Classes;
@using HallRentalSystem.Classes.Models;
@using HallRentalSystem.Classes.StructuralAndBehavioralElements;
@using HallRentalSystem.Classes.StructuralAndBehavioralElements.Formaters;
@using HallRentalSystem.Classes.API_Parameters;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JS;

<div class="datepicker_scroller">
    <div class="reservation-div">
        <div class="reservation-content">
            <h1 class="h1" style="align-self:center;font-size:40px;font-weight:600;">Book Hall</h1>

            <div class="date_picker">
                <RadzenDatePicker id="picker" Inline="true" @bind-Value=@value Change=Changed AllowInput=false YearRange=@year_range DateRender=@DateRender DateFormat="dd/MM/yyyy" Name="DatePickerSpecialDates" />
                <button class="clear_dates" @onclick=ClearDates>
                    Clear selected dates
                </button>
            </div>


            <div style="align-self:center;width:fit-content;">
                <p class="h4 total_price">
                    Total price: £@price
                </p>
            </div>

            <button class="h2 calendar_booking_button" @onclick=ReserveHall>
                Book
            </button>
        </div>
    </div>
</div>

@code {
    long price;

    [Parameter] public List<DateOnly> disabled_dates { get; set; } = new List<DateOnly>();
    List<DateOnly> selected_dates = new List<DateOnly>();


    string year_range = DateTime.Now.Year.ToString() + @":3000";
    public string date = DateTime.Now.Date.ToString();
    DateTime? value = DateTime.Now;


    TimeOnly startTimeValue = TimeOnly.FromDateTime(DateTime.Now);
    TimeOnly endTimeValue = TimeOnly.FromDateTime(DateTime.Now.AddHours(1));


    public delegate void OnClose();
    [Parameter] public long? Price { get; set; }
    [Parameter] public string? hallName { get; set; }

    public delegate void InitiatePayment(List<DateOnly> selectedDates);
    [Parameter] public InitiatePayment? initiatePayment { get; set; }

    public delegate void NotificationSystem(Shared_Data.BookingError error);
    [Parameter] public NotificationSystem? notificationSystem { get; set; }

    public delegate void CloseNotificationSystem();
    [Parameter] public CloseNotificationSystem? closeNotificationSystem { get; set; }


    void DateRender(DateRenderEventArgs args)
    {
        DateOnly date = new DateOnly();

        DateOnly current_time = DateOnly.FromDateTime(DateTime.Now);

        if (disabled_dates.Contains(DateOnly.FromDateTime(args.Date)))
        {
            args.Disabled = true;
            args.Attributes.Add("style", "background-color: rgba(255,0,0,0.6);");
        }
        else if (DateOnly.FromDateTime(args.Date) < current_time)
        {
            args.Disabled = true;
            args.Attributes.Add("style", "background-color: rgba(255,0,0,0.6);");
        }
        else if (selected_dates.Contains(DateOnly.FromDateTime(args.Date)) == true)
        {
            args.Attributes.Add("style", "background-color: rgba(61,255,62,0.6);");
        }
    }

    void Changed()
    {
        closeNotificationSystem?.Invoke();
        if (value != null)
            if ((DateTime)value.Value.Date >= DateTime.Now.Date)
                if (disabled_dates?.Contains(DateOnly.FromDateTime((DateTime)value.Value.Date)) == false)
                {
                    if (selected_dates?.Contains(DateOnly.FromDateTime((DateTime)value.Value.Date)) == false)
                    {
                        selected_dates?.Add(DateOnly.FromDateTime((DateTime)value.Value.Date));
                        if (Price != null)
                            price += (long)Price;
                    }
                    else
                    {
                        selected_dates?.Remove(DateOnly.FromDateTime((DateTime)value.Value.Date));
                        if (Price != null)
                            price -= (long)Price;
                    }
                }
    }

    void ClearDates()
    {
        selected_dates.Clear();
        price = 0;
        StateHasChanged();
    }

    private void ReserveHall()
    {
        if (selected_dates.Count > 0)
        {
            initiatePayment?.Invoke(selected_dates);
            closeNotificationSystem?.Invoke();
        }
        else
        {
            notificationSystem?.Invoke(Shared_Data.BookingError.InsufficientDates);
        }
    }
}
