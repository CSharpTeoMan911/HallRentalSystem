@using Radzen;
@using Radzen.Blazor.Rendering;
@using System.Text;
@using HallRentalSystem.Classes;
@using HallRentalSystem.Classes.StructuralAndBehavioralElements;
@using HallRentalSystem.Classes.StructuralAndBehavioralElements.Formaters;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JS;

<div class="reservation-div">
    <div class="reservation-content">
        <h2 class="title">Book Hall</h2>

        <div class="date_picker">
            <RadzenStack>
                <RadzenLabel Text="Select Date, bound to DateOnly" Component="DatePickerDateOnlyType" Style="margin-right: 8px; vertical-align: middle;" />
                <RadzenDatePicker id="picker" Inline="true" @bind-Value=@value AllowInput=false YearRange=@year_range DateRender=@DateRender DateFormat="dd/MM/yyyy" @onmousedown="Clicked" Name="DatePickerSpecialDates" />
            </RadzenStack>
        </div>

        <div>
            <p>
                Price
            </p>
        </div>

        <button @onclick=ReserveHall>
        </button>
    </div>
</div>

@code {
    bool Init;

    IEnumerable<DateTime> dates = new List<DateTime>() { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };
    IEnumerable<DateTime> disabled_dates = new List<DateTime>() { DateTime.Today.AddDays(1), DateTime.Today.AddDays(3), DateTime.Today.AddDays(5) };
    List<DateTime> selected_dates = new List<DateTime>();


    string year_range = @DateTime.Now.Year.ToString() + @":3000";
    public string date = DateTime.Now.Date.ToString();
    DateTime? value = DateTime.Now;


    TimeOnly startTimeValue = TimeOnly.FromDateTime(DateTime.Now);
    TimeOnly endTimeValue = TimeOnly.FromDateTime(DateTime.Now.AddHours(1));


    public delegate void OnClose();
    [Parameter] public string? HallName { get; set; }


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    void Clicked(MouseEventArgs args)
    {
        System.Diagnostics.Debug.WriteLine("OK");
    }

    async void DateRender(DateRenderEventArgs args)
    {
        //await (await JS.InvokeAsync<IJSObjectReference>("import", "./Scripts/Actions.js")).InvokeAsync<string>("DebugWriteLine", selected_dates.Count);


        DateTime current_time = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0, 0, 0);

        if (disabled_dates.Contains(args.Date))
        {
            args.Attributes.Add("style", "background-color: rgba(255,0,0,0.6)");
            args.Disabled = true;
        }

        if (args.Date.Date < current_time)
        {
            args.Attributes.Add("style", "background-color: rgba(255,0,0,0.6)"); 
            args.Disabled = true;
        }
        else
        {
            if (selected_dates?.Contains(current_time) == true)
            {
                await (await JS.InvokeAsync<IJSObjectReference>("import", "./Scripts/Actions.js")).InvokeAsync<string>("DebugWriteLine", "YES");
                args.Attributes.Remove("style");
                args.Attributes.Add("style", "background-color: rgba(61,255,62,0.6)");
            }
            else
            {
                args.Attributes.Remove("style");
                selected_dates?.Remove((DateTime)value);
                args.Attributes.Add("style", "background-color: rgba(255,255,255,0)");
            }
        }

        if (Init == true)
        {
            if (args.Date.Date >= current_time)
            {
                if (value != null)
                    if (current_time.Date.Date == args.Date.Date)
                    {
                        //await debug.InvokeVoidAsync("DebugWriteLine", value.ToString());
                        if (selected_dates.Contains((DateTime)value) == false)
                        {
                            selected_dates?.Add((DateTime)value);
                        }
                    }
            }
        }

        Init = true;
    }


    private async void GetHallData()
    {
        HttpClient client = Shared_Data.GenerateHttpCLient();

        try
        {
            client.BaseAddress = new Uri(NavigationManager.BaseUri);

            Bookings booking = new Bookings();

            ///////////////////////////////////////////////
            // !!! IMPLEMENT BOOKING DATA EXTRACTION !!! //
            ///////////////////////////////////////////////


            string api_controller_path = "/booking?";
            string formated_query = await Query_Formater.ObjectQueryFormatter<Bookings>(booking);
            int total_length = api_controller_path.Length + formated_query.Length;


            StringBuilder url_builder = new StringBuilder(total_length);
            url_builder.Append(api_controller_path);
            url_builder.Append(formated_query);


            HttpResponseMessage response_message = await client.GetAsync(url_builder.ToString());
            string response = await response_message.Content.ReadAsStringAsync();

            ///////////////////////////////////////////////////////
            // !!! IMPLEMENT API RESPONSE MESSAGE PROCESSING !!! //
            ///////////////////////////////////////////////////////
        }
        catch
        {

        }
        finally
        {
            client?.Dispose();
        }
    }

    private async void ReserveHall()
    {
        HttpClient client = Shared_Data.GenerateHttpCLient();

        try
        {
            client.BaseAddress = new Uri(NavigationManager.BaseUri);

            Bookings booking = new Bookings();

            ///////////////////////////////////////////////
            // !!! IMPLEMENT BOOKING DATA EXTRACTION !!! //
            ///////////////////////////////////////////////


            string api_controller_path = "/booking?";
            string formated_query = await Query_Formater.ObjectQueryFormatter<Bookings>(booking);
            int total_length = api_controller_path.Length + formated_query.Length;


            StringBuilder url_builder = new StringBuilder(total_length);
            url_builder.Append(api_controller_path);
            url_builder.Append(formated_query);


            HttpResponseMessage response_message = await client.GetAsync(url_builder.ToString());
            string response = await response_message.Content.ReadAsStringAsync();

            ///////////////////////////////////////////////////////
            // !!! IMPLEMENT API RESPONSE MESSAGE PROCESSING !!! //
            ///////////////////////////////////////////////////////
        }
        catch
        {

        }
        finally
        {
            client?.Dispose();
        }
    }
}
