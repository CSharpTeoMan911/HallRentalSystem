@using HallRentalSystem.Classes.StructuralAndBehavioralElements.Stripe_Payment
@using HallRentalSystem.Components;
@using System.Text;
@using HallRentalSystem.Classes.Models;
@using HallRentalSystem.Classes.API_Parameters;
@using HallRentalSystem.Classes.StructuralAndBehavioralElements;
@using HallRentalSystem.Classes.StructuralAndBehavioralElements.Formaters;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JS;

<div class="payments_container">
    <div class="payments_div_style">
        <img class="graphical_effect" />

        <div class="main_payment_section">
            <p class="sub_section">
                Product
            </p>
            <div class="payment_section">
                <p class="payment_detail">
                    Hall name: @HallName
                </p>
                <p class="payment_detail">
                    Total number of days: @SelectedDates?.Count
                </p>
                <p class="payment_detail">
                    Price: £@Price
                </p>
            </div>

        </div>

        <div class="main_payment_section">
            <p class="sub_section">
                Payment details
            </p>

            <div class="payment_section">
                <div id="payment_div" class="payments_div"></div>
                <div class="payment_detail_input_div">
                    <input class="payment_details_input" @bind=@Name placeholder="Name" />
                    <input class="payment_details_input" @bind=@City placeholder="City" />
                </div>
                <div class="payment_detail_input_div" style="margin-bottom:20px;">
                    <input class="payment_details_input" @bind=@Address placeholder="Address" />
                    <input class="payment_details_input" @bind=@Email placeholder="Email" />
                </div>
            </div>
        </div>

        <button class="payment_button" @onclick=Payment>
            Pay
        </button>
    </div>
</div>

@code {
    [Parameter] public string? HallName { get; set; }

    [Parameter] public List<DateOnly>? SelectedDates { get; set; }

    [Parameter] public long? Price { get; set; }

    public delegate void NotificationSystem(Shared_Data.BookingError error);
    [Parameter] public NotificationSystem? notificationSystem { get; set; }

    public delegate void CloseNotificationSystem();
    [Parameter] public CloseNotificationSystem? closeNotificationSystem { get; set; }

    public delegate void PaymentSystem(Shared_Data.PaymentStatus status, PaymentSessionResult result);
    [Parameter] public PaymentSystem? paymentSystem { get; set; }

    [Parameter] public string? hall_id { get; set; }

    [Parameter] public FirebaseKey? key { get; set; }

    private string? Name { get; set; }
    private string? City { get; set; }
    private string? Address { get; set; }
    private string? Email { get; set; }

    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender == true)
        {
            IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./Scripts/Stripe.js");

            try
            {
                string result = await module.InvokeAsync<string>("InitiatePaymentObject", Price);
            }
            catch { }
        }
    }

    private async void Payment()
    {
        IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./Scripts/Stripe.js");

        try
        {
            string paymentMethodResult = await module.InvokeAsync<string>("CreatePaymentMethod", Name, City, Address, Email);

            if (paymentMethodResult.IndexOf("Error: ") == 0)
            {
                if (paymentMethodResult == "Error: Your email address is invalid.")
                {
                    notificationSystem?.Invoke(Shared_Data.BookingError.InvalidEmailAddress);
                }
                else
                {
                    notificationSystem?.Invoke(Shared_Data.BookingError.PaymentError);
                }
            }
            else
            {
                if (Name == null && City == null && Address == null && Email == null)
                {
                    notificationSystem?.Invoke(Shared_Data.BookingError.PaymentError);
                }
                else
                {

                    StringBuilder url_builder = new StringBuilder("/booking/insert-booking?");


                    Booking_Parameters parameters = new Booking_Parameters();
                    parameters.Hall_ID = hall_id;
                    parameters.stripe_payment_method = paymentMethodResult;
                    parameters.rental_dates = SelectedDates;
                    parameters.key = key;

                    string formatted_url_parameters = await Query_Formater.ObjectQueryFormatter(parameters);
                    url_builder.Append(formatted_url_parameters);

                    HttpClient client = Shared_Data.GenerateHttpCLient();
                    client.BaseAddress = new Uri(NavigationManager.BaseUri);
                    HttpResponseMessage result = await client.PostAsync(url_builder.ToString(), null);
                    string payment_result = await result.Content.ReadAsStringAsync();

                    Console.WriteLine(payment_result);

                    if (payment_result != "Log in session key expired")
                    {
                        if (payment_result != "Invalid login session key")
                        {
                            if (payment_result != "Internal server error")
                            {
                                if (payment_result != "Missing required data")
                                {
                                    if (payment_result != "Payment unsuccessful")
                                    {
                                        if (payment_result != "Invalid hall object")
                                        {
                                            try
                                            {
                                                PaymentSessionResult? paymentResult = Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentSessionResult>(payment_result);

                                                switch (paymentResult?.status)
                                                {
                                                    case "succeeded":
                                                        paymentSystem?.Invoke(Shared_Data.PaymentStatus.PaymentSucceeded, paymentResult);
                                                        break;
                                                    case "requires_action":
                                                        paymentSystem?.Invoke(Shared_Data.PaymentStatus.RequiresAction, paymentResult);
                                                        break;
                                                    default:
                                                        break;
                                                }
                                            }
                                            catch
                                            {
                                                notificationSystem?.Invoke(Shared_Data.BookingError.PaymentError);
                                            }

                                        }
                                        else
                                        {
                                            notificationSystem?.Invoke(Shared_Data.BookingError.InvalidHallObject);
                                        }
                                    }
                                    else
                                    {
                                        notificationSystem?.Invoke(Shared_Data.BookingError.PaymentError);
                                    }
                                }
                                else
                                {
                                    notificationSystem?.Invoke(Shared_Data.BookingError.MissingRequiredData);
                                }
                            }
                            else
                            {
                                notificationSystem?.Invoke(Shared_Data.BookingError.PaymentError);
                            }
                        }
                        else
                        {
                            notificationSystem?.Invoke(Shared_Data.BookingError.LogInSessionKeyExpired);
                        }
                    }
                    else
                    {
                        notificationSystem?.Invoke(Shared_Data.BookingError.LogInSessionKeyExpired);
                    }
                }
            }
        }
        catch { }

    }
}
