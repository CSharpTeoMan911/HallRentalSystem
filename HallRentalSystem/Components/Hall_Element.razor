@using HallRentalSystem.Classes.API_Parameters
@using HallRentalSystem.Classes.Models;
@using HallRentalSystem.Components;
@inject IJSRuntime JS;
@inject NavigationManager NavigationManager;

<div class="jumbotorn hall_element">
    <div class="hall_element_inner">
        <Dynamic_Image_Craousel image_sources="dummy_image_sources" element="@element" />


        <div class="details_element_section">
            <div class="details_div">
                <h2 class="element_name">@value?.Name</h2>
                <div class="main_details_div">
                    <div class="details_div_inner">
                        <div class="details_div_inner_sections">
                            <div class="details_div_inner_sections_main">
                                <div class="details_div_inner_section">
                                    <p class="propriety_label">Location: </p>
                                    <p class="value_label">@value?.Location</p>
                                </div>
                                <br />
                                <div class="details_div_inner_section">
                                    <p class="propriety_label">Price: </p>
                                    <p class="value_label">@value?.Price</p>
                                    <p class="price_unit">£/hour</p>
                                </div>
                                <br />
                                <div class="details_div_inner_section">
                                    <p class="propriety_label">Capacity: </p>
                                    <p class="value_label">@value?.Capacity</p>
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="amenities_main_div">
                        <div class="amenities_main_sub_div">
                            <div class="amenities_div">
                                @for (int i = 0; i < amenities?.Count; i++)
                                {
                                    <div class="amenities_item">
                                        @amenities.ElementAt(i)
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                </div>

                <button class="booking_button" @onclick=BookHall>
                    Book hall
                </button>
            </div>
        </div>

        @* IF "ShowNotification" IS TRUE *@
        @if (ShowNotification == true)
        {
            @* "Notification_System" COMPONENT *@
            <Notification_System MessageContent="@MessageContent" NotificationClose="new Notification_System.OnClose(CloseNotification)" Type="@type" />
        }

        @if (ReserveHall == true)
        {
            <FocusPanel ClosePanel="new FocusPanel.OnClose(CloseReservation)">
                <Component>
                    <HallRezervation/>
                </Component>
            </FocusPanel>
        }

    </div>
</div>

@code {
    private bool ShowNotification;
    private bool ReserveHall;
    private string? MessageContent;
    private Notification_System.NotificationType type;

    [Parameter]
    public Hall_ID_Value? value { get; set; }

    [Parameter]
    public string? element { get; set; }

    [Parameter]
    public List<string>? amenities { get; set; }

    public List<string> dummy_image_sources = new List<string>()
    {
        "https://images.prismic.io/storefront/6cce1106-627d-495d-8100-5e2936ce01f8_cheap_halls.jpg",
        "https://www.tagvenue.com/images/location-pages/small/1243.jpg",
        "https://images.squarespace-cdn.com/content/v1/61fa4242070ec54e4f16e077/53a2249d-b1d2-4137-b57f-8c489646bbb8/*+use+ADC_9477.jpeg?format=500w"
    };

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    public void CloseNotification()
    {
        // SET THE "ShowNotification" TO FALSE
        ShowNotification = false;

        // RELOAD THE COMPONENT
        StateHasChanged();
    }

    public void CloseReservation()
    {
        ReserveHall = false;

        StateHasChanged();
    }

    private async void BookHall()
    {
        try
        {
            IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./Scripts/Actions.js");

            if (module != null)
            {
                string serialisedFirebaseKey = await module.InvokeAsync<string>("AuthCache", "key", "Get");

                if (serialisedFirebaseKey != null)
                {
                    FirebaseKey? key = Newtonsoft.Json.JsonConvert.DeserializeObject<FirebaseKey>(serialisedFirebaseKey);

                    if (key != null)
                    {
                        IJSObjectReference module_reference = await JS.InvokeAsync<IJSObjectReference>("import", "../Scripts/Actions.js");
                        await module_reference.InvokeAsync<string>("SetCurrentHallName", value?.Name);
                        // NavigationManager.NavigateTo("/hall_rezervation", true);
                        ReserveHall = true;
                        StateHasChanged();
                    }
                    else
                    {
                        OnPermissionError();
                    }
                }
                else
                {
                    OnPermissionError();
                }
            }
        }
        catch { }
    }

    private void OnPermissionError()
    {
        MessageContent = "An authenticated user is required to book a hall";
        type = Notification_System.NotificationType.Error;
        ShowNotification = true;

        StateHasChanged();

        DateTime initial_time = DateTime.Now;

        System.Threading.Thread parallel_processing = new System.Threading.Thread(() =>
        {
            while (true)
            {
                if ((DateTime.Now - initial_time).TotalSeconds >= 5)
                {
                    NavigationManager.NavigateTo("/log-in", true);
                    break;
                }
            }
        });
        parallel_processing.Priority = ThreadPriority.AboveNormal;
        parallel_processing.IsBackground = false;
        parallel_processing.Start();

    }
}

