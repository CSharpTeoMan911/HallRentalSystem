@using HallRentalSystem.Classes.StructuralAndBehavioralElements.Stripe_Payment;
@using HallRentalSystem.Classes.StructuralAndBehavioralElements;
@using HallRentalSystem.Classes.API_Parameters;
@using HallRentalSystem.Classes.Models;
@using HallRentalSystem.Components;
@using System.Text

@inject IJSRuntime JS;
@inject NavigationManager NavigationManager;

<div class="jumbotorn hall_element">
    <div class="hall_element_inner">

        <Dynamic_Image_Craousel image_sources="dummy_image_sources" element="@element" />

        <div class="details_element_section">
            <h2 class="element_name">@value?.Name</h2>

            <div style="display:flex;flex-direction:column;margin-left:20px">

                <div style="display:flex;flex-direction:column;align-self:center;">

                    <div class="sub_section">
                        <div class="sub_section" style="margin-right:30px;">

                            <div style="display:flex;flex-direction:column;">
                                <div class="super_sub_section">
                                    <div class="main_sub_section">
                                        <p class="propriety_label">Location: </p>
                                    </div>
                                    <div class="sub_section" style="margin-bottom:0px;">
                                        <p class="value_label">@value?.Location</p>
                                    </div>
                                </div>

                                <div class="super_sub_section">
                                    <div class="main_sub_section">
                                        <p class="propriety_label">Price: </p>
                                    </div>
                                    <div class="sub_section" style="margin-bottom:0px;">
                                        <div style="display:flex;flex-direction:row;">
                                            <p class="value_label">@value?.Price</p>
                                            <p class="value_label">£/day</p>
                                        </div>
                                    </div>
                                </div>

                                <div class="super_sub_section">
                                    <div class="main_sub_section">
                                        <div>
                                            <p class="propriety_label">Capacity: </p>
                                        </div>
                                    </div>
                                    <div class="sub_section">
                                        <div style="display:flex;flex-direction:row;">
                                            <p class="value_label">@value?.Capacity</p>
                                        </div>
                                    </div>
                                </div>

                                <div class="super_sub_section">
                                    <div class="@toggle_state">
                                        <button class="dropdown-toggle dropdown_amenities_button" type="button" id="dropdownMenuButton" data-toggle="collapse" data-target="@("#" + element + "_collapse")" aria-expanded="false">
                                            Amenities
                                        </button>
                                        <div class="collapse dropdown-menu dropdown-menu-custom" id="@(element + "_collapse")">
                                            @for (int i = 0; i < value?.Amenities?.Count; i++)
                                            {
                                                <div class="sub_section">
                                                    <div class="amenities_item">
                                                        @value?.Amenities.ElementAt(i)
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>

                                </div>
                            </div>
  
                        </div>
                    </div>

                    <button class="booking_button" @onclick=BookHall>
                        Book hall
                    </button>
                </div>
            </div>
        </div>

        @* IF "ShowNotification" IS TRUE *@
        @if (ShowNotification == true)
        {
            @* "Notification_System" COMPONENT *@
            <Notification_System MessageContent="@MessageContent" NotificationClose="new Notification_System.OnClose(CloseNotification)" Type="@type"/>
        }

        @if (ReserveHall == true)
        {
            <FocusPanel ClosePanel="new FocusPanel.OnClose(CloseReservation)">
                <Component>
                    @if (PaymentInitiated == true)
                    {
                        @if (ConfirmPayment == true)
                        {
                            <PaymentConfirmation payment_session_result="@paymentSessionResult"/>
                        }
                        else
                        {
                            <Payments HallName="@value?.Name" SelectedDates="@_selected_dates" Price="@value?.Price" notificationSystem="new Payments.NotificationSystem(BookingError)" closeNotificationSystem="new Payments.CloseNotificationSystem(CloseNotification)" paymentSystem="new Payments.PaymentSystem(OnPayment)" hall_id="@hall_id" key="@key" />
                        }
                    }
                    else
                    {
                        <HallRezervation Price="@value?.Price" hallName="@value?.Name" disabled_dates="@disabled_dates" initiatePayment="new HallRezervation.InitiatePayment(PaymentProcedureInitiated)" notificationSystem="new HallRezervation.NotificationSystem(BookingError)" closeNotificationSystem="new HallRezervation.CloseNotificationSystem(CloseNotification)"/>
                    }
                </Component>
            </FocusPanel>
        }

    </div>
</div>

@code {
    private System.Timers.Timer timer = new System.Timers.Timer();
    private bool ShowNotification;
    private bool ReserveHall;
    private bool ConfirmPayment;
    private bool LogInSessionKeyExpired;
    private string? MessageContent;
    private Notification_System.NotificationType type;
    private bool PaymentInitiated;
    private List<DateOnly>? _selected_dates { get; set; }
    private DateTime? permission_error_initial_time;
    private DateTime? booking_error_initial_time;
    private DateTime? payment_initial_time;
    private FirebaseKey? key { get; set; }
    private string toggle_state { get; set; }  = "dropdown";

    private PaymentSessionResult? paymentSessionResult{ get; set; }

    private List<DateOnly> disabled_dates = new List<DateOnly>();

    [Parameter]
    public Hall_ID_Value? value { get; set; }

    [Parameter]
    public string? element { get; set; }

    [Parameter]
    public string? hall_id { get; set; }

    public List<string> dummy_image_sources = new List<string>()
    {
        "https://images.prismic.io/storefront/6cce1106-627d-495d-8100-5e2936ce01f8_cheap_halls.jpg",
        "https://www.tagvenue.com/images/location-pages/small/1243.jpg",
        "https://images.squarespace-cdn.com/content/v1/61fa4242070ec54e4f16e077/53a2249d-b1d2-4137-b57f-8c489646bbb8/*+use+ADC_9477.jpeg?format=500w"
    };

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        timer.Elapsed += (sender, args)=> ThreadPoolTimerLoop(args);
        timer.Interval = 500;
        timer.Start();
    }

    private async void ThreadPoolTimerLoop(System.Timers.ElapsedEventArgs args)
    {
        if (permission_error_initial_time != null)
            if ((DateTime.Now - permission_error_initial_time).Value.TotalSeconds >= 5)
            {
                NavigationManager.NavigateTo("/log-in", true);
                permission_error_initial_time = null;
            }

        if (booking_error_initial_time != null)
            if ((DateTime.Now - booking_error_initial_time).Value.TotalSeconds >= 5)
            {
                await InvokeAsync(() =>
                {
                    CloseNotification();
                });
                booking_error_initial_time = null;

                if (LogInSessionKeyExpired == true)
                {
                    NavigationManager.NavigateTo("log-in", true);
                }
            }

        if (payment_initial_time != null)
            if ((DateTime.Now - payment_initial_time).Value.TotalSeconds >= 5)
            {
                await InvokeAsync(() =>
                {
                    PaymentInitiated = false;
                    ReserveHall = false;
                    CloseNotification();
                });
                payment_initial_time = null;
            }
    }


    public void PaymentProcedureInitiated(List<DateOnly> selected_dates)
    {
        _selected_dates = selected_dates;
        PaymentInitiated = true;
        StateHasChanged();
    }

    public void CloseNotification()
    {
        // SET THE "ShowNotification" TO FALSE
        ShowNotification = false;

        // RELOAD THE COMPONENT
        StateHasChanged();
    }

    public void CloseReservation()
    {
        ReserveHall = false;

        PaymentInitiated = false;

        ConfirmPayment = false;

        StateHasChanged();
    }

    private async void BookHall()
    {
        try
        {
            IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./Scripts/Actions.js");

            if (module != null)
            {
                string serialisedFirebaseKey = await module.InvokeAsync<string>("AuthCache", "key", "Get");

                if (serialisedFirebaseKey != null)
                {
                    key = Newtonsoft.Json.JsonConvert.DeserializeObject<FirebaseKey>(serialisedFirebaseKey);

                    if (key != null)
                    {
                        await GetDisabledDates();
                        ReserveHall = true;
                        StateHasChanged();
                    }
                    else
                    {
                        OnPermissionError();
                    }
                }
                else
                {
                    OnPermissionError();
                }
            }
        }
        catch { }
    }

    private async void OnPayment(Shared_Data.PaymentStatus status, PaymentSessionResult result)
    {
        switch (status)
        {
            case Shared_Data.PaymentStatus.PaymentSucceeded:
                MessageContent = "Payment successful";
                type = Notification_System.NotificationType.Notification;
                ShowNotification = true;
                payment_initial_time = DateTime.Now;
                break;
            case Shared_Data.PaymentStatus.RequiresAction:
                try
                {
                    IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./Scripts/Actions.js");
                    await module.InvokeAsync<string>("StripeCache", result?.payment_intent_id_database_key, "Insert");
                    paymentSessionResult = result;
                    ConfirmPayment = true;
                }
                catch { }
                break;
        }

        StateHasChanged();
    }

    public async void BookingError(Shared_Data.BookingError error)
    {
        switch (error)
        {
            case Shared_Data.BookingError.InsufficientDates:
                MessageContent = "The amount of booked dates must be greater than 0";
                type = Notification_System.NotificationType.Error;
                ShowNotification = true;
                break;
            case Shared_Data.BookingError.PaymentError:
                MessageContent = "Please fill all the fields";
                type = Notification_System.NotificationType.Error;
                ShowNotification = true;
                break;
            case Shared_Data.BookingError.MissingRequiredData:
                MessageContent = "Please fill all credit card fields";
                type = Notification_System.NotificationType.Error;
                ShowNotification = true;
                break;
            case Shared_Data.BookingError.InvalidHallObject:
                MessageContent = "The hall selected is invalid";
                type = Notification_System.NotificationType.Error;
                ShowNotification = true;
                break;
            case Shared_Data.BookingError.InvalidEmailAddress:
                MessageContent = "The email address inserted is invalid";
                type = Notification_System.NotificationType.Error;
                ShowNotification = true;
                break;
            case Shared_Data.BookingError.LogInSessionKeyExpired:
                try
                {
                    IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./Scripts/Actions.js");
                    await module.InvokeAsync<string>("AuthCache", "key", "Delete");
                }
                catch { }

                LogInSessionKeyExpired = true;
                MessageContent = "The log in session expired. Please log in.";
                type = Notification_System.NotificationType.Error;
                ShowNotification = true;
                break;
        }

        StateHasChanged();

        booking_error_initial_time = DateTime.Now;
    }

    private void OnPermissionError()
    {
        MessageContent = "An authenticated user is required to book a hall";
        type = Notification_System.NotificationType.Error;
        ShowNotification = true;

        StateHasChanged();

        permission_error_initial_time = DateTime.Now;
    }

    private void SwitchToggleState()
    {
        switch (toggle_state)
        {
            case "dropdown":
                toggle_state = "dropup";
                break;
            case "dropup":
                toggle_state = "dropdown";
                break;
        }

        StateHasChanged();
    }

    private async Task<bool> GetDisabledDates()
    {
        try
        {
            StringBuilder url_builder = new StringBuilder();
            url_builder.Append("/total-booking-dates/get?");
            url_builder.Append("data=");
            url_builder.Append(hall_id);

            HttpClient client = Shared_Data.GenerateHttpCLient();
            client.BaseAddress = new Uri(NavigationManager.Uri);

            HttpResponseMessage response = await client.GetAsync(url_builder.ToString());
            string serialised_dates = await response.Content.ReadAsStringAsync();

            if (serialised_dates != null)
            {
                Total_Booking_Dates? values = Newtonsoft.Json.JsonConvert.DeserializeObject<Total_Booking_Dates>(serialised_dates);

                if (values != null)
                    foreach (string key in values.Keys)
                    {
                        Total_Booking_Dates_Values? value = null;
                        values.TryGetValue(key, out value);
                        if(value != null)
                        {
                            DateOnly disabled_date = DateOnly.ParseExact(Convert.ToString(value.Booking_Date), "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture);
                            disabled_dates.Add(disabled_date);
                        }
                    }
            }
        }
        catch { }

        return true;
    }
}

