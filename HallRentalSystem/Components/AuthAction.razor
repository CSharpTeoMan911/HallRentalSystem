@using System.Text;
@using HallRentalSystem.Classes;
@using HallRentalSystem.Classes.API_Payloads;
@using HallRentalSystem.Classes.Models;
@using HallRentalSystem.Classes.StructuralAndBehavioralElements.Authentication;
@using HallRentalSystem.Classes.StructuralAndBehavioralElements.Formaters;
@using HallRentalSystem.Classes.StructuralAndBehavioralElements;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject NavigationManager NavigationManager;
@inject ProtectedLocalStorage LocalStorage;
@inject IJSRuntime JS;

<div class="authaction_div">
    <button class="transistive_button" @onclick=ImplementTransition>
        @TransistiveButton
    </button>

    <button class="action_button" @onclick=ImplementAuthAction>
        @ActionButton
    </button>


    @if (ShowNotification == true)
    {
        <Notification_System MessageContent="@MessageContent" NotificationClose="new Notification_System.OnClose(CloseNotification)" Type="@type"/>
    }
</div>

@code {
    private bool ShowNotification;
    private string? MessageContent;
    private Notification_System.NotificationType type;

    [Parameter]
    public string? ActionButton { get; set; }

    [Parameter]
    public string? TransistiveButton { get; set; }

    [Parameter]
    public string? TransitionTarget { get; set; }


    private async void ImplementAuthAction()
    {
        IJSObjectReference? module = await JS.InvokeAsync<IJSObjectReference>("import", "./Scripts/Actions.js");
        string[]? result = null;
        string? query = null;
        string? response = null;

        StringBuilder url_formatter = new StringBuilder();

        HttpClient client = Shared_Data.GenerateHttpCLient();
        client.BaseAddress = new Uri(NavigationManager.BaseUri);

        Customer_ID_Value customers = new Customer_ID_Value();

        switch (ActionButton)
        {
            case "Log In":
                url_formatter.Append("/auth/get-account?");
                result = await module.InvokeAsync<string[]>("GetLoginEmailAndPassword", "email_input", "password_input");

                if (result?.Length == 2)
                {
                    customers.Email = result[0];
                    customers.Password = result[1];

                    query = await Query_Formater.ObjectQueryFormatter<Customer_ID_Value>(customers);
                    url_formatter.Append(query);

                    HttpResponseMessage response_message = await client.GetAsync(url_formatter.ToString());
                    response = await response_message.Content.ReadAsStringAsync();

                    switch (response)
                    {
                        case "Internal server error":
                            type = Notification_System.NotificationType.Error;
                            break;
                        case "Invalid email or password":
                            type = Notification_System.NotificationType.Error;
                            break;
                        default:
                            Auth_Result? auth_result = Newtonsoft.Json.JsonConvert.DeserializeObject<Auth_Result>(response);
                            if (auth_result != null)
                            {
                                response = auth_result.Response;

                                if (auth_result.Response == "Internal server error")
                                {
                                    type = Notification_System.NotificationType.Error;
                                }
                                else
                                {
                                    type = Notification_System.NotificationType.Notification;
                                    OnLoginSuccessful(auth_result.Log_In_Key);
                                }
                            }
                            else
                            {
                                response = "Internal server error";
                                type = Notification_System.NotificationType.Error;
                            }
                            break;
                    }
                }

                break;
            case "Register":
                url_formatter.Append("/auth/insert-account?");
                result = await module.InvokeAsync<string[]>("GetRegisterEmailAndPassword", "email_input", "password_input", "re_password_input");

                if (result?.Length == 2)
                {
                    customers.Email = result[0];
                    customers.Password = result[1];

                    query = await Query_Formater.ObjectQueryFormatter<Customer_ID_Value>(customers);
                    url_formatter.Append(query);

                    HttpResponseMessage response_message = await client.PostAsync(url_formatter.ToString(), null);
                    response = await response_message.Content.ReadAsStringAsync();

                    switch (response)
                    {
                        case "Registration successful":
                            OnRegistrationSuccessful();
                            type = Notification_System.NotificationType.Notification;
                            break;
                        case "Invalid credentials":
                            type = Notification_System.NotificationType.Error;
                            break;
                        case "Passowrd is less than 10 characters long":
                            type = Notification_System.NotificationType.Error;
                            break;
                        case "Invalid email address":
                            type = Notification_System.NotificationType.Error;
                            break;
                        case "Email already in use":
                            type = Notification_System.NotificationType.Error;
                            break;
                        case "Internal server error":
                            type = Notification_System.NotificationType.Error;
                            break;
                    }

                }
                else
                {
                    type = Notification_System.NotificationType.Error;
                    response = "Passwords do not match";
                }
                break;
        }

        MessageContent = response;
        ShowNotification = true;
        StateHasChanged();
    }

    public void CloseNotification()
    {
        ShowNotification = false;
        StateHasChanged();
    }

    private void ImplementTransition()
    {
        if (TransitionTarget != null)
            NavigationManager.NavigateTo(TransitionTarget);
    }

    private void OnRegistrationSuccessful()
    {
        DateTime registration_time = DateTime.Now;

        System.Threading.Thread thread = new System.Threading.Thread(async() =>
        {
            while (true)
            {
                if ((DateTime.Now - registration_time).TotalSeconds >= 3)
                {
                    await Dispatcher.CreateDefault().InvokeAsync(() =>
                    {
                        NavigationManager.NavigateTo("/log-in");
                    });
                    break;
                }
            }
        });
        thread.Priority = ThreadPriority.AboveNormal;
        thread.IsBackground = true;
        thread.Start();
    }


    private async void OnLoginSuccessful(string? key)
    {
        AuthStateManagerParameters parameters = new AuthStateManagerParameters();
        parameters.localStorage = LocalStorage;
        parameters.log_in_session_key = key;

        await Shared_Data.auth_manager.Insert<bool>(parameters);
        DateTime registration_time = DateTime.Now;

        System.Threading.Thread thread = new System.Threading.Thread(async () =>
        {
            while (true)
            {
                if ((DateTime.Now - registration_time).TotalSeconds >= 3)
                {
                    await Dispatcher.CreateDefault().InvokeAsync(() =>
                    {
                        NavigationManager.NavigateTo("/book");
                    });
                    break;
                }
            }
        });
        thread.Priority = ThreadPriority.AboveNormal;
        thread.IsBackground = true;
        thread.Start();
    }
}
