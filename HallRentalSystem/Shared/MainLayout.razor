@using HallRentalSystem.Classes.StructuralAndBehavioralElements;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inherits LayoutComponentBase
@inject NavigationManager Navigation_Manager;
@inject ProtectedLocalStorage LocalStorage;
@inject IJSRuntime JS

<PageTitle>HallRentalSystem</PageTitle>
<div id="background_image" class="main_background_image_style"></div>
<div id="main_page_structure_div" class="main_page_structure">
    <div>
        <NavMenu/>
    </div>
    <main>
        <div class="page_content_structure">
            <div class="page_content">
                <div class="index_page_skeleton">
                    @Body
                </div>
            </div>
        </div>
    </main>
</div>
@code{
    private async void InitiateAnimations()
    {
        try
        {
        IJSObjectReference animations_module = await JS.InvokeAsync<IJSObjectReference>("import", "./Scripts/Animations.js");

            if(animations_module != null){
        try
        {
            await animations_module.InvokeAsync<string>("SetBookingElementResize");
        }
        catch { }

        try
        {
            await animations_module.InvokeAsync<string>("ClearBookingElementsContainerResize");
        }
        catch { }

        try
        {
            await animations_module.InvokeAsync<string>("SetBackgroundImage");
        }
        catch { }

        try
        {
            await animations_module.InvokeAsync<string>("GradientFluctuationAnimationCancellation");
        }
        catch { }

        try
        {
            await animations_module.InvokeAsync<string>("Clear_Background_Image_Sizing");
        }
        catch { }

        try
        {
            await animations_module.InvokeAsync<string>("ClearExpansionAnimation", "main_page_structure_div");
        }
        catch { }

        try
        {
            await animations_module.InvokeAsync<string>("Clear_Set_Button_Focus_Effect", "button_cover_1");
        }
        catch { }

        try
        {
            await animations_module.InvokeAsync<string>("Clear_Set_Button_Focus_Effect", "button_cover_2");
        }
        catch { }

        try
        {
            await animations_module.InvokeAsync<string>("Clear_Resize_Home_Page_Elements");
        }
        catch { }

        try
        {
            await animations_module.InvokeAsync<string>("Clear_Resize_Contacts_Page_Elemets");
        }
        catch { }

        try
        {
            await animations_module.InvokeAsync<string>("ClearAuthGradientFluctuation");
        }
        catch { }

        try
        {
            await animations_module.InvokeAsync<string>("SetBookingElementResize");
        }
        catch { }

        try
        {
             await animations_module.InvokeAsync<string>("ExpansionAnimation", "index_page_jumbotron", "90", "10", "%");
        }
        catch { }
        
        try
        {
            await animations_module.InvokeAsync<string>("GradientFluctuationAnimation", "main_page_structure_div", "40", "65", "50");
        }
        catch { }

        try
        {
            await animations_module.InvokeAsync<string>("SetBookingElementsContainerResize");
        }
        catch { }

        try
        {
            await animations_module.InvokeAsync<string>("Set_Background_Image_Sizing");
        }
        catch { }

        try
        {
            await animations_module.InvokeAsync<string>("Set_Resize_Home_Page_Elements");
        }
        catch { }

        try
        {
            await animations_module.InvokeAsync<string>("Set_Resize_Contacts_Page_Elemets");
        }
        catch { }

        try
        {
            await animations_module.InvokeAsync<string>("SetAuthGradientFluctuation");
        }
        catch { }
            }
        }
        catch{}
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (await Shared_Data.auth_manager.Get<string>(LocalStorage) != String.Empty)
        {
            if (Shared_Data.authentication_state == Shared_Data.AuthState.Login)
            {
                Shared_Data.authentication_state = Shared_Data.AuthState.Logout;
                Navigation_Manager.NavigateTo(Navigation_Manager.Uri, true);
            }
        }
        else
        {
            if (Shared_Data.authentication_state == Shared_Data.AuthState.Logout)
            {
                Shared_Data.authentication_state = Shared_Data.AuthState.Login;
                Navigation_Manager.NavigateTo(Navigation_Manager.Uri, true);
                StateHasChanged();
            }
        }

        base.OnAfterRender(firstRender);
        if (Program.Is_API_Testing_Mode == true)
            Navigation_Manager.NavigateTo("/swagger/index.html", forceLoad: true);
        InitiateAnimations();
    }
}
