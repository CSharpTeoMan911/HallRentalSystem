@using HallRentalSystem.Classes.API_Parameters;
@using HallRentalSystem.Classes.StructuralAndBehavioralElements.Formaters;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using HallRentalSystem.Classes.StructuralAndBehavioralElements;
@using System.Text;
@inject NavigationManager Navigation_Manager;
@inject ProtectedLocalStorage LocalStorage;
@inject IJSRuntime JS;

<nav id="main_nav" class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" style="margin-left:20px;font-size:28px;" href="/" @onclick=@(()=>OnPageNavigation(false))>Hall Rentals</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation" style="margin-left:20px;margin-right:20px;">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
        <div class="navbar-nav" style="margin-left:20px;">
            <a id="/" style="font-size:23px;" class="nav-link active" @onclick=@(()=>OnPageNavigation(false)) href="/">Home</a>
            <a id="/book" style="font-size:23px;" class="nav-link" @onclick=@(()=>OnPageNavigation(false)) href="/book">Booking</a>
            <a id="/contacts" style="font-size:23px;" class="nav-link" @onclick=@(()=>OnPageNavigation(false)) href="/contacts">Contacts</a>
            <a id="/auth" style="font-size:23px;" class="nav-link" href="/" @onclick=@(()=>OnPageNavigation(true))>@authentication_state</a>
        </div>
    </div>
</nav>

@code{
    public enum AuthState
    {
        Login,
        Logout
    }
    public AuthState authentication_state = AuthState.Login;


    public async void OnPageNavigation(bool isAuth)
    {
        if (isAuth == true)
            AuthStateManagement();

        IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./Scripts/Actions.js");
        await module.InvokeAsync<string>("ChangeNavState", isAuth.ToString());
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        try
        {
            IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./Scripts/Actions.js");
            string serialisedFirebaseKey = await module.InvokeAsync<string>("AuthCache", "key", "Get");

            if (serialisedFirebaseKey != null)
            {
                if(authentication_state != AuthState.Logout)
                {
                    authentication_state = AuthState.Logout;
                    StateHasChanged();
                }
            }
            else
            {
                if(authentication_state != AuthState.Login)
                {
                    authentication_state = AuthState.Login;
                    StateHasChanged();
                }
            }
        }
        catch{}
    }

    private async void AuthStateManagement()
    {
        if (authentication_state == AuthState.Logout)
        {
            authentication_state = AuthState.Login;

            try
            {
                IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./Scripts/Actions.js");
                string serialisedFirebaseKey = await module.InvokeAsync<string>("AuthCache", "key", "Get");

                if (serialisedFirebaseKey != null)
                {
                    FirebaseKey? firebaseKey = Newtonsoft.Json.JsonConvert.DeserializeObject<FirebaseKey>(serialisedFirebaseKey);
                    if (firebaseKey != null)
                    {
                        StringBuilder query_builder = new StringBuilder();
                        query_builder.Append("/log-out/user-log-out?");
                        string query = await Query_Formater.ObjectQueryFormatter<FirebaseKey>(firebaseKey);
                        query_builder.Append(query);

                        HttpClient client = Shared_Data.GenerateHttpCLient();
                        client.BaseAddress = new Uri(Navigation_Manager.BaseUri);
                        await client.DeleteAsync(query_builder.ToString());
                    }
                    
                    await module.InvokeAsync<string>("AuthCache", "key", "Delete");
                }
            }
            catch { }
            StateHasChanged();
        }
        else
        {
            Navigation_Manager.NavigateTo("/log-in", true);
        }
    }
}