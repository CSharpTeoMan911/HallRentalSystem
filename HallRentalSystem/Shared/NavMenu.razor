@using HallRentalSystem.Classes.API_Parameters;
@using HallRentalSystem.Classes.StructuralAndBehavioralElements.Formaters;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using HallRentalSystem.Classes.StructuralAndBehavioralElements;
@using System.Text;
@inject NavigationManager Navigation_Manager;
@inject ProtectedLocalStorage LocalStorage;

<nav id="main_nav" class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" style="margin-left:20px;font-size:28px;" href="/" @onclick=@(()=>OnPageNavigation(0))>Hall Rentals</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation" style="margin-left:20px;margin-right:20px;">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
        <div class="navbar-nav" style="margin-left:20px;">
            <a style="font-size:23px;" class=@class_names.ElementAt(0) @onclick=@(()=>OnPageNavigation(0)) href="/">Home</a>
            <a style="font-size:23px;" class=@class_names.ElementAt(1) @onclick=@(()=>OnPageNavigation(1)) href="/book">Booking</a>
            <a style="font-size:23px;" class=@class_names.ElementAt(2) @onclick=@(()=>OnPageNavigation(2)) href="/contacts">Contacts</a>
            <a style="font-size:23px;" class=@class_names.ElementAt(3) href="/" @onclick=@(()=>OnPageNavigation(3))>@Shared_Data.authentication_state</a>
        </div>
    </div>
</nav>

@code{
    private static List<string> class_names = new List<string>()
    {
        "nav-link active",
        "nav-link",
        "nav-link",
        "nav-link"
    };

    string active_class_name = "nav-link active";
    string non_active_class_name = "nav-link";

    Shared_Data.AuthState auth = Shared_Data.AuthState.Login;


    private void OnPageNavigation(int index)
    {
        for(int i = 0; i < class_names.Count; i++)
        {
            if (i == index)
            {
                if (index == 3)
                    AuthStateManagement();
                class_names[i] = "nav-link active";
            }
            else
            {
                class_names[i] = "nav-link";
            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    private async void AuthStateManagement()
    {
        if (Shared_Data.authentication_state == Shared_Data.AuthState.Logout)
        {
            Shared_Data.authentication_state = Shared_Data.AuthState.Login;

            string? serialisedFirebaseKey = await Shared_Data.auth_manager.Get<string>(LocalStorage);
            try
            {
                if (serialisedFirebaseKey != null)
                {
                    FirebaseKey? firebaseKey = Newtonsoft.Json.JsonConvert.DeserializeObject<FirebaseKey>(serialisedFirebaseKey);
                    if (firebaseKey != null)
                    {
                        StringBuilder query_builder = new StringBuilder();
                        query_builder.Append("/log-out/user-log-out?");
                        string query = await Query_Formater.ObjectQueryFormatter<FirebaseKey>(firebaseKey);
                        query_builder.Append(query);

                        HttpClient client = new HttpClient();
                        client.BaseAddress = new Uri(Navigation_Manager.BaseUri);
                        await client.DeleteAsync(query_builder.ToString());
                    }
                }
            }
            catch{}
            await Shared_Data.auth_manager.Delete<bool>(LocalStorage);
            StateHasChanged();
        }
        else
        {
            Navigation_Manager.NavigateTo("/log-in", true);
        }
    }
}